/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/outputs.h>

#define DEFAULT 0
#define SYM 1
#define NAV 2
#define NUM 3
#define MED 4

/ {
        macros {
                ZMK_MACRO(caps_macro,
                        tap-ms = <200>;
                        bindings = <&kp CAPS>;
                )
        };

        behaviors {
                lt_caps: layer_tap_capslock {
                        compatible = "zmk,behavior-hold-tap";
                        label = "LT_CAPS";
                        #binding-cells = <2>;
                        tapping-term-ms = <200>;
                        quick-tap-ms = <0>;
                        flavor = "tap-preferred";
                        bindings = <&mo>, <&caps_macro>;
                };
                hm: homerow_mods {
                        compatible = "zmk,behavior-hold-tap";
                        label = "HM_MODS";
                        #binding-cells = <2>;
                        tapping-term-ms = <200>;
                        quick-tap-ms = <0>;
                        flavor = "balanced";
                        bindings = <&kp>, <&kp>;
                };
                lt_tmb: layer_tap_thumb {
                        compatible = "zmk,behavior-hold-tap";
                        label = "LT_THUMB";
                        #binding-cells = <2>;
                        tapping-term-ms = <100>;
                        quick-tap-ms = <0>;
                        flavor = "hold-preferred";
                        bindings = <&mo>, <&kp>;
                };
        };

        keymap {
                compatible = "zmk,keymap";

                default_layer {
                        bindings = <
   &none &kp Q &kp W &kp E &kp R &kp T                            &kp Y &kp U &kp I &kp O &kp P &none
   &none &hm LCTRL A &hm LALT S &hm LCMD D &hm LSHIFT F &kp G     &kp H &hm RSHIFT J &hm RCMD K &hm LALT L &hm RCTRL SEMI &none
   &none &kp Z &kp X &kp C &kp V &kp B                            &kp N &kp M &kp COMMA &kp DOT &kp FSLH &none
                      &mt LCMD ESC &lt_tmb SYM TAB &lt_caps NUM 0    &lt MED RET &lt NAV SPACE &kp BACKSPACE
                        >;
                };

                symbols_layer {
                        bindings = <
   &trans &trans    &kp CARET &kp LBRC &kp RBRC &kp LA(N3)   &kp BSLH  &kp SQT   &kp DQT   &kp GRAVE &kp AT    &trans
   &trans &kp AMPS  &kp PIPE  &kp LPAR &kp RPAR &kp DLLR     &kp TILDE &kp UNDER &kp MINUS &kp PLUS  &kp COLON &trans
   &trans &kp PRCNT &kp STAR  &kp LBKT &kp RBKT &kp LS(N3)   &kp EXCL  &kp EQUAL &kp LT    &kp GT    &kp QMARK &trans
                                      &trans &trans &trans   &trans &kp SPACE &trans
                        >;
                };

                nav_layer {
                        bindings = <
   &trans &trans    &kp CARET &kp LBRC &kp RBRC &kp LA(N3)   &kp BSLH  &kp SQT   &kp DQT   &kp GRAVE &kp AT &trans
   &trans &kp AMPS  &kp PIPE  &kp LPAR &kp RPAR &kp DLLR     &kp LEFT &kp DOWN &kp UP &kp RIGHT  &kp COLON &trans
   &trans &kp PRCNT &kp STAR  &kp LBKT &kp RBKT &kp LS(N3)   &kp EXCL  &kp EQUAL &kp LT    &kp GT    &kp QMARK &trans
                                     &trans &trans &kp DEL   &trans &trans &trans
                        >;
                };
                num_layer {
                        bindings = <
   &trans &trans &trans &trans &trans &trans   &trans &kp N7 &kp N8 &kp N9 &kp AT &trans
   &trans &trans &trans &trans &trans &trans   &kp PLUS &kp N4 &kp N5 &kp N6 &kp STAR &trans
   &trans &trans &trans &trans &trans &trans   &kp MINUS &kp N1 &kp N2 &kp N3 &kp FSLH &trans
                        &trans &trans &trans   &trans &kp N0 &kp DOT
                        >;
                };
                media_layer {
                          bindings = <
   &trans &trans &trans &trans &trans &trans      &trans &kp LS(LA(C_VOL_DN)) &kp LS(LA(C_VOL_UP)) &trans &out OUT_TOG &trans
   &trans &bt BT_CLR &trans &trans &trans &trans      &trans &kp C_VOL_DN &kp C_VOL_UP &trans &ext_power EP_OFF &trans
   &trans &trans &trans &trans &trans &trans      &kp LS(LC(LG(N4))) &kp C_PP &kp K_MUTE &trans &kp C_PWR &trans
                        &trans &trans &trans      &trans &kp N0 &kp DOT
                          >;
                };
        };
};
